/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CompileResit2;

import java.util.ArrayList;
import javax.swing.JOptionPane;

public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public GUI() {
        initComponents();
    }
    String[][] output2;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButton1.setText("Tokenize");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Enter Code:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButton2.setText("Parse");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(27, 27, 27))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(83, 83, 83)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(133, 133, 133)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        public String[] createArray(String str, char c) {
        String[] str1 = str.split("");
        String ch = Character.toString(c);
        boolean flag = false;
        if (!str.equals("==") && !str.equals("!=") && !str.equals(">=") && !str.equals("<=")) {
            if (str.length() > 1 && str.contains(ch)) {
                if (str.charAt(0) == c && str.charAt(str.length() - 1) == c) {
                    String[] str2 = str.split(ch);
                    int m = str2.length + str2.length + 1;
                    str1 = new String[m];
                    str1[0] = ch;
                    int j = 0;
                    for (int i = 1; i < m - 1 && j < str2.length; i += 2, j++) {
                        str1[i] = str2[j];
                        if (j < str2.length - 1) {
                            str1[i + 1] = ch;
                        }
                    }
                    str1[m - 1] = ch;
                    flag = true;
                } else if (str.charAt(0) == c) {
                    String[] str2 = str.split(ch);
                    int m = str2.length + str2.length - 2;
                    str1 = new String[m];
                    str1[0] = ch;
                    int j = 1;
                    for (int i = 1; i < m && j < str2.length; i += 2, j++) {
                        str1[i] = str2[j];
                        if (j < str2.length - 1) {
                            str1[i + 1] = ch;
                        }
                    }
                    flag = true;
                } else if (str.charAt(str.length() - 1) == c) {
                    String[] str2 = str.split(ch);
                    int m = str2.length + str2.length;
                    str1 = new String[m];
                    int j = 0;
                    for (int i = 0; i < m - 1 && j < str2.length; i += 2, j++) {
                        str1[i] = str2[j];
                        if (j < str2.length - 1) {
                            str1[i + 1] = ch;
                        }
                    }
                    str1[m - 1] = ch;
                    flag = true;
                } else {
                    String[] str2 = str.split(ch);
                    int m = str2.length + str2.length - 1;
                    str1 = new String[m];
                    int j = 0;
                    for (int i = 0; i < m && j < str2.length; i += 2, j++) {
                        str1[i] = str2[j];
                        if (j < str2.length - 1) {
                            str1[i + 1] = ch;
                        }
                    }
                    flag = true;
                }
            }
        }
        if (!flag) {
            str1 = new String[1];
            str1[0] = str;
        }
        return str1;
    }

    public String[] functionCall(String[] code1) {
        String[] output3;
        ArrayList<String[]> list1;
        char[] ch1 = new char[4];
        ch1[0] = '=';
        ch1[1] = '>';
        ch1[2] = '<';
        ch1[3] = '!';
        for (int o = 0; o < 4; o++) {
            list1 = new ArrayList();
            for (int i = 0; i < code1.length; i++) {
                list1.add(createArray(code1[i], ch1[o]));
            }
            int count = 0;
            for (int i = 0; i < list1.size(); i++) {
                count += list1.get(i).length;
            }
            output3 = new String[count];
            int k = 0;
            for (int i = 0; i < list1.size(); i++) {
                for (int j = 0; j < list1.get(i).length; j++) {
                    output3[k] = list1.get(i)[j];
                    k++;
                }
            }
            code1 = output3;
        }
        return code1;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        ArrayList<String> Tokens = new ArrayList<String>();

        String CODE = jTextArea1.getText();
        //String CODE="{float cos, x, n, term, eps, alt;";
        String code = CODE.replaceAll("(?:/\\*(?:[^*]|(?:\\*+[^*/]))*\\*+/)|(?://.*)", "")
                .replace("+", " + ")
                .replace("-", " - ")
                .replace("*", " * ")
                .replace("/", " / ")
                .replace("==", " == ")
                .replace(">=", " >= ")
                .replace("<=", " <= ")
                .replace("!=", " != ")
                .replace("&&", " && ")
                .replace("(", " ( ")
                .replace(")", " ) ")
                .replace("{", " { ")
                .replace("}", " } ")
                .replace("[", " [ ")
                .replace("]", " ] ")
                .replace(".", " . ")
                .replace(",", " , ")
                .replace(";", " ; ")
                .replace(":", " ; ");

        String[] output = code.split("\\n+");
        output2 = new String[output.length][];
        for (int i = 0; i < output.length; i++) {
            output2[i] = functionCall(output[i].split("\\s+"));
        }
        //for(int i=0;i<output2.length;i++){
        //    for(int j=0;j<output2[i].length;j++){
        //        System.out.print(output2[i][j]+" ");
        //    }
        //    System.out.println();
        //}
        output = functionCall(output);
        for (int j = 0; j < output2.length; j++) {
            for (int i = 0; i < output2[j].length; i++) {

                switch (output2[j][i]) {
                    //DataTypes
                    case ("int"):
                        Tokens.add("int");
                        System.out.println("int --> DATA TYPE");
                        break;
                    case ("float"):
                        Tokens.add("float");
                        System.out.println("float --> DATA TYPE");
                        break;

                    //Reserved Words
                    case ("for"):
                        Tokens.add("for");
                        System.out.println("for --> Reserved Word");
                        break;
                    case ("while"):
                        Tokens.add("while");
                        System.out.println("while --> Reserved Word");
                        break;
                    case ("if"):
                        Tokens.add("if");
                        System.out.println("if --> Reserved Word ");
                        break;
                    case ("else"):
                        Tokens.add("else");
                        System.out.println("else --> Reserved Word ");
                        break;
                    //Binary Operators
                    case ("+"):
                        Tokens.add("+");
                        System.out.println("+ -->Binary Operator ");
                        break;
                    case ("-"):
                        Tokens.add("-");
                        System.out.println("- -->Binary Operator ");
                        break;
                    case ("*"):
                        Tokens.add("*");
                        System.out.println("* -->Binary Operator ");
                        break;
                    case ("/"):
                        Tokens.add("/");
                        System.out.println("/ -->Binary Operator ");
                        break;

                    //Symbols 
                    case (""):
                        Tokens.add("");
                        System.out.println("");
                        break;
                    case ("="):
                        Tokens.add("=");
                        System.out.println("= -->Symbol ");
                        break;
                    case ("<"):
                        Tokens.add("<");
                        System.out.println("< -->Symbol ");
                        break;
                    case (">"):
                        Tokens.add(">");
                        System.out.println("> -->Symbol ");
                        break;
                    case ("("):
                        Tokens.add("(");
                        System.out.println("( -->Symbol ");
                        break;
                    case (")"):
                        Tokens.add(")");
                        System.out.println(") -->Symbol ");
                        break;
                    case ("{"):
                        Tokens.add("{");
                        System.out.println("{ -->Symbol ");
                        break;
                    case ("}"):
                        Tokens.add("}");
                        System.out.println("} -->Symbol ");
                        break;
                    case (";"):
                        Tokens.add(";");
                        System.out.println("; -->Symbol ");
                        break;
                    case (","):
                        Tokens.add(",");
                        System.out.println(", -->Symbol ");
                        break;
                    case ("."):
                        Tokens.add(".");
                        System.out.println(". -->Symbol ");
                        break;
                    case ("<="):
                        Tokens.add("<=");
                        System.out.println("<= -->Symbol ");
                        break;
                    case (">="):
                        Tokens.add(">=");
                        System.out.println(">= -->Symbol ");
                        break;
                    case ("!="):
                        Tokens.add("!=");
                        System.out.println("!= -->Symbol ");
                        break;
                    case ("=="):
                        Tokens.add("==");
                        System.out.println("== -->Symbol ");
                        break;

                    default:
                        String c = output2[j][i];

                        char ch[] = c.toCharArray();

                        if (Character.isDigit(ch[0])) {
                            Tokens.add("Integer Lateral");
                            System.out.println(output2[j][i] + " --> Integer Lateral ");
                        } else if (Character.isLetter(ch[0])) {
                            Tokens.add("Identifier");
                            System.out.println(output2[j][i] + " --> Identifier ");
                        } else if (c.matches("") && Character.isLetter(ch[0])) {
                            Tokens.add("Identifier");
                            System.out.println(output2[j][i] + " --> Identifier ");
                        } //                            else if(c.contains("="))
                        //                            {
                        //                               // symbols.contains(Character.toString(code.charAt(i)))
                        //                                System.out.println(output[i] + " --> Symbol ");
                        //                            }
                        else {
                            System.out.println(output2[j][i] + " --> Invalid Token ");
                        }
                        break;
                }
            }
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Parser p = new Parser(output2);
        p.evaluate();
        JOptionPane.showMessageDialog(this, p.showErrors());
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
